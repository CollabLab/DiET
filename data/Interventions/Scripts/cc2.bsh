import java.*;
import diet.*;
import diet.parameters.*;
import diet.message.*;
import diet.parameters.ui.*;
import diet.beanshell.*;
import diet.client.*;
import diet.server.*;
import diet.*;
import diet.server.conversationhistory.ui;



processLoop(){
          c.resetFromIsTypingtoNormalChatAllAllowedParticipants(cC.getIsTypingTimeOut());      
}
    
   
    
processChatText(Participant sender,MessageChatTextFromClient mct){    
       
                
           c.relayTurnToAllowedParticipants(sender,mct);
           c.sendLabelDisplayToAllowedParticipantsFromApparentOrigin(sender,"Status: OK",false);
          
}
    
processKeyPress(Participant sender,MessageKeypressed mkp){

}

    
    
processWYSIWYGTextInserted(Participant sender,MessageWYSIWYGDocumentSyncFromClientInsert mWYSIWYGkp){
          c.informIsTypingToAllowedParticipants(sender);
       
}
    
    
processWYSIWYGTextRemoved(Participant sender,MessageWYSIWYGDocumentSyncFromClientRemove mWYSIWYGkp){

}
    
    
public void processWYSIWYGSelectionChanged(Participant sender, MessageWYSIWYGTextSelectionFromClient mWYSIWYGSel){

}
    



















public ExperimentSettings getExperimentParameters(){
        Vector v = new Vector();
        StringParameter sp;
        StringParameterFixed spf;
        IntParameter ip;
        sp = new StringParameter("Experiment ID","No intervention");
        sp.setDescription("This is the default simple chat tool operation: no interventions are performed");
        v.addElement(sp);
        Vector spv = new Vector();spv.addElement("No intervention");spv.addElement("Split Utterance with parse");spv.addElement("Frag CR of nouns");spv.addElement("WYSIWYG Disfluency");spv.addElement("WYSIWYG Intercept & Disfluency");
        spf = new StringParameterFixed("Conversation Controller",spv,"No intervention");
        spf.setDescription("Pre-installed intervention templates. There are some interdependencies that place restrictions on the values of other parameters.");
        //v.addElement(spf);
        sp = new StringParameter("Experiment Data Folder","c:\\testdirectory\\Experiments");
        sp.setDescription("Folder where data from experiment is stored");
        v.addElement(sp);
         sp = new StringParameter("Parser file location",System.getProperty("user.dir")+File.separatorChar+"utils"+File.separatorChar+"englishPCFG.ser.gz");
          sp.setDescription("Location of parser");
        v.addElement(sp);
         sp = new StringParameter("WordnNet folder location",System.getProperty("user.dir")+"."+File.separatorChar+"utils");
         sp.setDescription("Location of folder containing WordNet libraries");
        v.addElement(sp);
        ip = new IntParameter("Number of participants per conversation",2);
        ip.setDescription("Determines when an experiment can proceed and also determines how many chat windows to display when run locally");
        v.addElement(ip);
        spv = new Vector();spv.addElement("Formulate revise then send. Single or multiple windows");spv.addElement("WYSIWYG Simplex single window");spv.addElement("WYSIWYG Duplex multiple windows");
        spf = new StringParameterFixed("Chat tool interface",spv,"Formulate revise then send. Single or multiple windows");
        spf.setDescription("The different kinds of chat tool. \n \"Formulate revise then send\" is the default, tpyical of most messenger apps. It allows single and multiple windows.\n WYSIWYG Simplex single window displays turns character-by-character and strictly enforces turn-taking. \n WYSIWYG Duplex multiple windows displays turns character-by-character with each participant's contributions placed in separate windows. It is similar to UNIX chat");
        v.addElement(spf);
        ip = new IntParameter("Number of windows per chat tool",1);
        v.addElement(ip);
        spv = new Vector();spv.addElement("ONEWINDOWENABLED");spv.addElement("ONEWINDOWDISABLED");spv.addElement("EACHOWNWINDOWATTOPENABLED");spv.addElement("EACHOWNWINDOWATTOPDISABLED");spv.addElement("EACHOWNWINDOWRANDOMENABLED");spv.addElement("EACHOWNWINDOWRANDOMDISABLED");
        spf = new StringParameterFixed("Window numbering policy",spv,"ONEWINDOWENABLED");
        spf.setDescription("This determines which window each participant sees their own and each other's contributions");
        v.addElement(spf);
        spv = new Vector();spv.addElement("Horizontal");spv.addElement("Vertical");
        spf = new StringParameterFixed("Horizontal or vertical alignment of multiple windows",spv,"Vertical");
        v.addElement(spf);
        ip = new IntParameter("Number of rows in chat window",10);
        v.addElement(ip);
        ip = new IntParameter("Number of rows in chat text entry area",2);
        v.addElement(ip);
        ip = new IntParameter("Number of columns in chat window",50);
        v.addElement(ip);
        spv = new Vector();spv.addElement("yes");spv.addElement("no");
        spf = new StringParameterFixed("Display parse tree","no",spv,"no");
        v.addElement(spf);
        ip = new IntParameter("Parser Timeout",500,1000);
        v.addElement(ip);
        ip = new IntParameter("Parser Max Length (chars)",70,70);
        v.addElement(ip);
        spv = new Vector();spv.addElement("Enabled");spv.addElement("Disabled");
        spf = new StringParameterFixed("Transcript parser enabled",spv,"Enabled");
        v.addElement(spf);
        ip = new IntParameter("Transcript parser timeout",500);
        v.addElement(ip);
        ip = new IntParameter("Typing status timeout (msecs)",1000);
        v.addElement(ip);
        ExperimentSettings expSett = new ExperimentSettings(v);
        
        
        for(int i=0;i<v.size();i++){
            System.err.println("VERIFYING PARAMETERS ");
            Object o = v.elementAt(i);
            if(o instanceof Parameter){
                System.err.println(i+"VERIFYING PARAMETERS "+((Parameter)o).getID());
            }
            else{
                System.err.println(i+" EXITING "+o.getClass().toString()+" "+o.toString());
                System.exit(10*-i);
            }
        }
        
        
        return expSett;
    }